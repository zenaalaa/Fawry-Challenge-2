# -*- coding: utf-8 -*-
"""Slope Challenge.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1inEF6flZW5cYxTFlnDqxFCops6KevVSA
"""

from abc import ABC, abstractmethod

# Abstract base class for products
class Product(ABC):
    def __init__(self, isbn, title, year, price):
        self.isbn = isbn
        self.title = title
        self.year = year
        self.price = price

    @abstractmethod
    def deliver(self, quantity, address=None, email=None):
        pass

# Concrete product classes
class PaperBook(Product):
    def __init__(self, isbn, title, year, price, stock):
        super().__init__(isbn, title, year, price)
        self.stock = stock

    def deliver(self, quantity, address=None, email=None):
        if address is None:
            raise ValueError("Address is required for paper book delivery")
        if self.stock >= quantity: # Reduce the stock amount if found, otherwise raise error
            self.stock -= quantity
            print(f"Successfully delivered {quantity} copies of {self.title} (PaperBook) to {address}")
            return self.price * quantity
        else:
            raise ValueError("Insufficient stock")

class EBook(Product):
    def __init__(self, isbn, title, year, price, filetype):
        super().__init__(isbn, title, year, price)
        self.filetype = filetype

    def deliver(self, quantity, address=None, email=None):
        if email is None:
            raise ValueError("Email is required for eBook delivery")
        print(f"Successfully delivered {quantity} copies of {self.title} (EBook) to {email}")
        return self.price * quantity

class ShowcaseDemoBook(Product):
    def __init__(self, isbn, title, year):
        super().__init__(isbn, title, year, 0)

    def deliver(self, quantity, address=None, email=None):
        raise ValueError("Showcase/Demo books are not for sale")

# Inventory management class
class BookInventory:
    def __init__(self):
        self.books = {}

    def add_book(self, book):
        self.books[book.isbn] = book
        print(f"Successfully added book with ISBN: {book.isbn}, Title: {book.title}")

    def remove_outdated(self, years):
        current_year = 2025  # Based on actual current year
        outdated = {isbn: book for isbn, book in self.books.items()
                   if current_year - book.year >= years}  # Identify books older than specified years
        for isbn in outdated.keys():  # Remove each outdated book from inventory
            del self.books[isbn]
        if outdated:
            print(f"Successfully removed {len(outdated)} outdated book(s)")
        return outdated

    def buy_book(self, isbn, quantity, address=None, email=None):
        if isbn not in self.books:
            raise ValueError("Book not found")
        book = self.books[isbn]
        paid_amount = book.deliver(quantity, address, email)
        print(f"Successfully completed purchase of ISBN: {isbn}, Amount paid: ${paid_amount}")
        return paid_amount

# Examples outside the class
def example_add_book():
    inventory = BookInventory()
    paper_book = PaperBook("ISBN1", "Book1", 2023, 10.0, 100)
    inventory.add_book(paper_book)
    print("\n")

def example_remove_outdated():
    inventory = BookInventory()
    demo_book = ShowcaseDemoBook("ISBN2", "Demo1", 2015)
    inventory.add_book(demo_book)
    outdated = inventory.remove_outdated(5)
    print("\n")

def example_buy_book():
    inventory = BookInventory()
    ebook = EBook("ISBN3", "EBook1", 2024, 5.0, "pdf")
    inventory.add_book(ebook)
    paid = inventory.buy_book("ISBN3", 2, email="user@example.com")
    print("\n")

def example_buy_book_error_no_email():
    inventory = BookInventory()
    ebook = EBook("ISBN4", "EBook2", 2024, 5.0, "pdf")
    inventory.add_book(ebook)
    try:
        inventory.buy_book("ISBN4", 1)  # No email provided, should raise an error
    except ValueError as e:
        print(f"Error buying eBook: {e}\n")

def example_buy_book_error_insufficient_stock():
    inventory = BookInventory()
    paper_book = PaperBook("ISBN5", "Book2", 2023, 10.0, 1)
    inventory.add_book(paper_book)
    try:
        inventory.buy_book("ISBN5", 2, address="123 Main St")  # Exceeds stock, should raise an error
    except ValueError as e:
        print(f"Error buying paper book: {e}\n")

def example_buy_book_error_not_found():
    inventory = BookInventory()
    try:
        inventory.buy_book("ISBN6", 1, email="user@example.com")  # Non-existent ISBN, should raise an error
    except ValueError as e:
        print(f"Error buying book: {e}\n")

def run_examples():
    example_add_book()
    example_remove_outdated()
    example_buy_book()
    example_buy_book_error_no_email()
    example_buy_book_error_insufficient_stock()
    example_buy_book_error_not_found()

# Example usage
if __name__ == "__main__":
    run_examples()